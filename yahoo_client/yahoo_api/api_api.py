# coding: utf-8

"""
    Yahoo Finance API Specification

    Real time low latency Yahoo Finance API for stock market, crypto currencies, and currency exchange  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from yahoo_client.api_client import ApiClient


class APIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def autocomplete(self, query, **kwargs):  # noqa: E501
        """autocomplete  # noqa: E501

        Get auto complete stock suggestions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.autocomplete_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.autocomplete_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def autocomplete_with_http_info(self, query, **kwargs):  # noqa: E501
        """autocomplete  # noqa: E501

        Get auto complete stock suggestions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: (required)
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'region', 'lang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autocomplete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `autocomplete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/finance/autocomplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chart(self, ticker, **kwargs):  # noqa: E501
        """chart  # noqa: E501

        Get chart data by ticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chart(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: (required)
        :param str comparisons: The tickers for comparison separated by comma. Max 10 tickers
        :param str range: `1d` `5d` `1mo` `3mo` `6mo` `1y` `5y` `10y` `ytd` `max`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :param str interval: `1m` `5m` `15m` `1d` `1wk` `1mo`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str events:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chart_with_http_info(ticker, **kwargs)  # noqa: E501
        else:
            (data) = self.chart_with_http_info(ticker, **kwargs)  # noqa: E501
            return data

    def chart_with_http_info(self, ticker, **kwargs):  # noqa: E501
        """chart  # noqa: E501

        Get chart data by ticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chart_with_http_info(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: (required)
        :param str comparisons: The tickers for comparison separated by comma. Max 10 tickers
        :param str range: `1d` `5d` `1mo` `3mo` `6mo` `1y` `5y` `10y` `ytd` `max`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :param str interval: `1m` `5m` `15m` `1d` `1wk` `1mo`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str events:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker', 'comparisons', 'range', 'region', 'interval', 'lang', 'events']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `chart`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501

        query_params = []
        if 'comparisons' in params:
            query_params.append(('comparisons', params['comparisons']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'events' in params:
            query_params.append(('events', params['events']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v8/finance/chart/{ticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def history(self, symbols, **kwargs):  # noqa: E501
        """history  # noqa: E501

        Stock history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.history(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Separated by comm. Max 10 (required)
        :param str interval: `1m` `5m` `15m` `1d` `1wk` `1mo`
        :param str range: `1d` `5d` `1mo` `3mo` `6mo` `1y` `5y` `max`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.history_with_http_info(symbols, **kwargs)  # noqa: E501
        else:
            (data) = self.history_with_http_info(symbols, **kwargs)  # noqa: E501
            return data

    def history_with_http_info(self, symbols, **kwargs):  # noqa: E501
        """history  # noqa: E501

        Stock history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.history_with_http_info(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Separated by comm. Max 10 (required)
        :param str interval: `1m` `5m` `15m` `1d` `1wk` `1mo`
        :param str range: `1d` `5d` `1mo` `3mo` `6mo` `1y` `5y` `max`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbols', 'interval', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbols' is set
        if ('symbols' not in params or
                params['symbols'] is None):
            raise ValueError("Missing the required parameter `symbols` when calling `history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'symbols' in params:
            query_params.append(('symbols', params['symbols']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v8/finance/spark', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def insights(self, symbol, **kwargs):  # noqa: E501
        """insights  # noqa: E501

        Research insights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.insights_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.insights_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def insights_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """insights  # noqa: E501

        Research insights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `insights`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ws/insights/v1/finance/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def options(self, symbol, **kwargs):  # noqa: E501
        """options  # noqa: E501

        Get option chain for a particular symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.options(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param float _date: example: 1510876800
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.options_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.options_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def options_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """options  # noqa: E501

        Get option chain for a particular symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.options_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :param float _date: example: 1510876800
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v7/finance/options/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def popular(self, scr_ids, **kwargs):  # noqa: E501
        """popular  # noqa: E501

        Most added to watchlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.popular(scr_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scr_ids: (required)
        :param float count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.popular_with_http_info(scr_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.popular_with_http_info(scr_ids, **kwargs)  # noqa: E501
            return data

    def popular_with_http_info(self, scr_ids, **kwargs):  # noqa: E501
        """popular  # noqa: E501

        Most added to watchlist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.popular_with_http_info(scr_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scr_ids: (required)
        :param float count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scr_ids', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method popular" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scr_ids' is set
        if ('scr_ids' not in params or
                params['scr_ids'] is None):
            raise ValueError("Missing the required parameter `scr_ids` when calling `popular`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'scr_ids' in params:
            query_params.append(('scrIds', params['scr_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ws/screeners/v1/finance/screener/predefined/saved', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quotes(self, symbols, **kwargs):  # noqa: E501
        """quotes  # noqa: E501

        Real time quote data for stocks, ETFs, mutuals funds, etc…  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Multiple symbols separated by commas. Max is 10 (required)
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `IT` `ES` `GB` `IN`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quotes_with_http_info(symbols, **kwargs)  # noqa: E501
        else:
            (data) = self.quotes_with_http_info(symbols, **kwargs)  # noqa: E501
            return data

    def quotes_with_http_info(self, symbols, **kwargs):  # noqa: E501
        """quotes  # noqa: E501

        Real time quote data for stocks, ETFs, mutuals funds, etc…  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quotes_with_http_info(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: Multiple symbols separated by commas. Max is 10 (required)
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `IT` `ES` `GB` `IN`
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbols', 'region', 'lang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quotes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbols' is set
        if ('symbols' not in params or
                params['symbols'] is None):
            raise ValueError("Missing the required parameter `symbols` when calling `quotes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'symbols' in params:
            query_params.append(('symbols', params['symbols']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/finance/quote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def similar(self, symbol, **kwargs):  # noqa: E501
        """similar  # noqa: E501

        List similar stocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.similar(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.similar_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.similar_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def similar_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """similar  # noqa: E501

        List similar stocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.similar_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method similar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `similar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/finance/recommendationsbysymbol/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stock_details(self, modules, symbol, **kwargs):  # noqa: E501
        """stock_details  # noqa: E501

        Get very detailed information for a particular stock.  The next portions of data can be retrieved with the service: `summaryDetail` `assetProfile` `fundProfile` `financialData` `defaultKeyStatistics` `calendarEvents` `incomeStatementHistory` `incomeStatementHistoryQuarterly` `cashflowStatementHistory` `balanceSheetHistory` `earnings` `earningsHistory` `insiderHolders` `cashflowStatementHistory` `cashflowStatementHistoryQuarterly` `insiderTransactions` `secFilings` `indexTrend` `sectorTrend` `earningsTrend` `netSharePurchaseActivity` `upgradeDowngradeHistory` `institutionOwnership` `recommendationTrend` `balanceSheetHistory` `balanceSheetHistoryQuarterly` `fundOwnership` `majorDirectHolders` `majorHoldersBreakdown`, `price`, `quoteType`, `esgScores`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stock_details(modules, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modules: `summaryDetail` `assetProfile` `fundProfile` `financialData` `defaultKeyStatistics` `calendarEvents` `incomeStatementHistory` `incomeStatementHistoryQuarterly` `cashflowStatementHistory` `balanceSheetHistory` `earnings` `earningsHistory` `insiderHolders` `cashflowStatementHistory` `cashflowStatementHistoryQuarterly` `insiderTransactions` `secFilings` `indexTrend` `sectorTrend` `earningsTrend` `netSharePurchaseActivity` `upgradeDowngradeHistory` `institutionOwnership` `recommendationTrend` `balanceSheetHistory` `balanceSheetHistoryQuarterly` `fundOwnership` `majorDirectHolders` `majorHoldersBreakdown`, `price`, `quoteType`, `esgScores` (required)
        :param str symbol: A single symbol (required)
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stock_details_with_http_info(modules, symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.stock_details_with_http_info(modules, symbol, **kwargs)  # noqa: E501
            return data

    def stock_details_with_http_info(self, modules, symbol, **kwargs):  # noqa: E501
        """stock_details  # noqa: E501

        Get very detailed information for a particular stock.  The next portions of data can be retrieved with the service: `summaryDetail` `assetProfile` `fundProfile` `financialData` `defaultKeyStatistics` `calendarEvents` `incomeStatementHistory` `incomeStatementHistoryQuarterly` `cashflowStatementHistory` `balanceSheetHistory` `earnings` `earningsHistory` `insiderHolders` `cashflowStatementHistory` `cashflowStatementHistoryQuarterly` `insiderTransactions` `secFilings` `indexTrend` `sectorTrend` `earningsTrend` `netSharePurchaseActivity` `upgradeDowngradeHistory` `institutionOwnership` `recommendationTrend` `balanceSheetHistory` `balanceSheetHistoryQuarterly` `fundOwnership` `majorDirectHolders` `majorHoldersBreakdown`, `price`, `quoteType`, `esgScores`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stock_details_with_http_info(modules, symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modules: `summaryDetail` `assetProfile` `fundProfile` `financialData` `defaultKeyStatistics` `calendarEvents` `incomeStatementHistory` `incomeStatementHistoryQuarterly` `cashflowStatementHistory` `balanceSheetHistory` `earnings` `earningsHistory` `insiderHolders` `cashflowStatementHistory` `cashflowStatementHistoryQuarterly` `insiderTransactions` `secFilings` `indexTrend` `sectorTrend` `earningsTrend` `netSharePurchaseActivity` `upgradeDowngradeHistory` `institutionOwnership` `recommendationTrend` `balanceSheetHistory` `balanceSheetHistoryQuarterly` `fundOwnership` `majorDirectHolders` `majorHoldersBreakdown`, `price`, `quoteType`, `esgScores` (required)
        :param str symbol: A single symbol (required)
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modules', 'symbol', 'lang', 'region']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stock_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modules' is set
        if ('modules' not in params or
                params['modules'] is None):
            raise ValueError("Missing the required parameter `modules` when calling `stock_details`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `stock_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'modules' in params:
            query_params.append(('modules', params['modules']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v11/finance/quoteSummary/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def summary(self, **kwargs):  # noqa: E501
        """summary  # noqa: E501

        Get live market summary information at the request time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def summary_with_http_info(self, **kwargs):  # noqa: E501
        """summary  # noqa: E501

        Get live market summary information at the request time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: `en` `fr` `de` `it` `es` `zh`
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'region']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v6/finance/quote/marketSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trending(self, region, **kwargs):  # noqa: E501
        """trending  # noqa: E501

        Trending stocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trending(region, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trending_with_http_info(region, **kwargs)  # noqa: E501
        else:
            (data) = self.trending_with_http_info(region, **kwargs)  # noqa: E501
            return data

    def trending_with_http_info(self, region, **kwargs):  # noqa: E501
        """trending  # noqa: E501

        Trending stocks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trending_with_http_info(region, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str region: `US` `AU` `CA` `FR` `DE` `HK` `US` `IT` `ES` `GB` `IN` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `trending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region' in params:
            path_params['region'] = params['region']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/finance/trending/{region}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
